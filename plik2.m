uiopen('C:\Users\local\AdOr\plik2.m',1)
n=1:100

n =

  Columns 1 through 14

     1     2     3     4     5     6     7     8     9    10    11    12    13    14

  Columns 15 through 28

    15    16    17    18    19    20    21    22    23    24    25    26    27    28

  Columns 29 through 42

    29    30    31    32    33    34    35    36    37    38    39    40    41    42

  Columns 43 through 56

    43    44    45    46    47    48    49    50    51    52    53    54    55    56

  Columns 57 through 70

    57    58    59    60    61    62    63    64    65    66    67    68    69    70

  Columns 71 through 84

    71    72    73    74    75    76    77    78    79    80    81    82    83    84

  Columns 85 through 98

    85    86    87    88    89    90    91    92    93    94    95    96    97    98

  Columns 99 through 100

    99   100

1./sqrt(n)

ans =

  Columns 1 through 8

    1.0000    0.7071    0.5774    0.5000    0.4472    0.4082    0.3780    0.3536

  Columns 9 through 16

    0.3333    0.3162    0.3015    0.2887    0.2774    0.2673    0.2582    0.2500

  Columns 17 through 24

    0.2425    0.2357    0.2294    0.2236    0.2182    0.2132    0.2085    0.2041

  Columns 25 through 32

    0.2000    0.1961    0.1925    0.1890    0.1857    0.1826    0.1796    0.1768

  Columns 33 through 40

    0.1741    0.1715    0.1690    0.1667    0.1644    0.1622    0.1601    0.1581

  Columns 41 through 48

    0.1562    0.1543    0.1525    0.1508    0.1491    0.1474    0.1459    0.1443

  Columns 49 through 56

    0.1429    0.1414    0.1400    0.1387    0.1374    0.1361    0.1348    0.1336

  Columns 57 through 64

    0.1325    0.1313    0.1302    0.1291    0.1280    0.1270    0.1260    0.1250

  Columns 65 through 72

    0.1240    0.1231    0.1222    0.1213    0.1204    0.1195    0.1187    0.1179

  Columns 73 through 80

    0.1170    0.1162    0.1155    0.1147    0.1140    0.1132    0.1125    0.1118

  Columns 81 through 88

    0.1111    0.1104    0.1098    0.1091    0.1085    0.1078    0.1072    0.1066

  Columns 89 through 96

    0.1060    0.1054    0.1048    0.1043    0.1037    0.1031    0.1026    0.1021

  Columns 97 through 100

    0.1015    0.1010    0.1005    0.1000

(1+1./n).^n

ans =

  Columns 1 through 8

    2.0000    2.2500    2.3704    2.4414    2.4883    2.5216    2.5465    2.5658

  Columns 9 through 16

    2.5812    2.5937    2.6042    2.6130    2.6206    2.6272    2.6329    2.6379

  Columns 17 through 24

    2.6424    2.6464    2.6500    2.6533    2.6563    2.6590    2.6615    2.6637

  Columns 25 through 32

    2.6658    2.6678    2.6696    2.6713    2.6728    2.6743    2.6757    2.6770

  Columns 33 through 40

    2.6782    2.6794    2.6804    2.6815    2.6824    2.6834    2.6842    2.6851

  Columns 41 through 48

    2.6859    2.6866    2.6873    2.6880    2.6887    2.6893    2.6899    2.6905

  Columns 49 through 56

    2.6911    2.6916    2.6921    2.6926    2.6931    2.6935    2.6940    2.6944

  Columns 57 through 64

    2.6948    2.6952    2.6956    2.6960    2.6963    2.6967    2.6970    2.6973

  Columns 65 through 72

    2.6977    2.6980    2.6983    2.6986    2.6988    2.6991    2.6994    2.6996

  Columns 73 through 80

    2.6999    2.7001    2.7004    2.7006    2.7008    2.7011    2.7013    2.7015

  Columns 81 through 88

    2.7017    2.7019    2.7021    2.7023    2.7025    2.7026    2.7028    2.7030

  Columns 89 through 96

    2.7032    2.7033    2.7035    2.7037    2.7038    2.7040    2.7041    2.7043

  Columns 97 through 100

    2.7044    2.7045    2.7047    2.7048

uiopen('C:\Users\local\AdOr\plik2.m',1)
(1+1.\n).^n

ans =

  1.0e+200 *

  Columns 1 through 8

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 9 through 16

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 17 through 24

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 25 through 32

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 33 through 40

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 41 through 48

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 49 through 56

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 57 through 64

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 65 through 72

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 73 through 80

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 81 through 88

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 89 through 96

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 97 through 100

    0.0000    0.0000    0.0100    2.7048

(1+1./n).^n

ans =

  Columns 1 through 8

    2.0000    2.2500    2.3704    2.4414    2.4883    2.5216    2.5465    2.5658

  Columns 9 through 16

    2.5812    2.5937    2.6042    2.6130    2.6206    2.6272    2.6329    2.6379

  Columns 17 through 24

    2.6424    2.6464    2.6500    2.6533    2.6563    2.6590    2.6615    2.6637

  Columns 25 through 32

    2.6658    2.6678    2.6696    2.6713    2.6728    2.6743    2.6757    2.6770

  Columns 33 through 40

    2.6782    2.6794    2.6804    2.6815    2.6824    2.6834    2.6842    2.6851

  Columns 41 through 48

    2.6859    2.6866    2.6873    2.6880    2.6887    2.6893    2.6899    2.6905

  Columns 49 through 56

    2.6911    2.6916    2.6921    2.6926    2.6931    2.6935    2.6940    2.6944

  Columns 57 through 64

    2.6948    2.6952    2.6956    2.6960    2.6963    2.6967    2.6970    2.6973

  Columns 65 through 72

    2.6977    2.6980    2.6983    2.6986    2.6988    2.6991    2.6994    2.6996

  Columns 73 through 80

    2.6999    2.7001    2.7004    2.7006    2.7008    2.7011    2.7013    2.7015

  Columns 81 through 88

    2.7017    2.7019    2.7021    2.7023    2.7025    2.7026    2.7028    2.7030

  Columns 89 through 96

    2.7032    2.7033    2.7035    2.7037    2.7038    2.7040    2.7041    2.7043

  Columns 97 through 100

    2.7044    2.7045    2.7047    2.7048

(1+1.\n).^n

ans =

  1.0e+200 *

  Columns 1 through 8

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 9 through 16

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 17 through 24

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 25 through 32

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 33 through 40

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 41 through 48

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 49 through 56

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 57 through 64

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 65 through 72

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 73 through 80

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 81 through 88

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 89 through 96

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 97 through 100

    0.0000    0.0000    0.0100    2.7048

(1+1./n).^n

ans =

  Columns 1 through 8

    2.0000    2.2500    2.3704    2.4414    2.4883    2.5216    2.5465    2.5658

  Columns 9 through 16

    2.5812    2.5937    2.6042    2.6130    2.6206    2.6272    2.6329    2.6379

  Columns 17 through 24

    2.6424    2.6464    2.6500    2.6533    2.6563    2.6590    2.6615    2.6637

  Columns 25 through 32

    2.6658    2.6678    2.6696    2.6713    2.6728    2.6743    2.6757    2.6770

  Columns 33 through 40

    2.6782    2.6794    2.6804    2.6815    2.6824    2.6834    2.6842    2.6851

  Columns 41 through 48

    2.6859    2.6866    2.6873    2.6880    2.6887    2.6893    2.6899    2.6905

  Columns 49 through 56

    2.6911    2.6916    2.6921    2.6926    2.6931    2.6935    2.6940    2.6944

  Columns 57 through 64

    2.6948    2.6952    2.6956    2.6960    2.6963    2.6967    2.6970    2.6973

  Columns 65 through 72

    2.6977    2.6980    2.6983    2.6986    2.6988    2.6991    2.6994    2.6996

  Columns 73 through 80

    2.6999    2.7001    2.7004    2.7006    2.7008    2.7011    2.7013    2.7015

  Columns 81 through 88

    2.7017    2.7019    2.7021    2.7023    2.7025    2.7026    2.7028    2.7030

  Columns 89 through 96

    2.7032    2.7033    2.7035    2.7037    2.7038    2.7040    2.7041    2.7043

  Columns 97 through 100

    2.7044    2.7045    2.7047    2.7048

(1+1./n).^n

ans =

  Columns 1 through 8

    2.0000    2.2500    2.3704    2.4414    2.4883    2.5216    2.5465    2.5658

  Columns 9 through 16

    2.5812    2.5937    2.6042    2.6130    2.6206    2.6272    2.6329    2.6379

  Columns 17 through 24

    2.6424    2.6464    2.6500    2.6533    2.6563    2.6590    2.6615    2.6637

  Columns 25 through 32

    2.6658    2.6678    2.6696    2.6713    2.6728    2.6743    2.6757    2.6770

  Columns 33 through 40

    2.6782    2.6794    2.6804    2.6815    2.6824    2.6834    2.6842    2.6851

  Columns 41 through 48

    2.6859    2.6866    2.6873    2.6880    2.6887    2.6893    2.6899    2.6905

  Columns 49 through 56

    2.6911    2.6916    2.6921    2.6926    2.6931    2.6935    2.6940    2.6944

  Columns 57 through 64

    2.6948    2.6952    2.6956    2.6960    2.6963    2.6967    2.6970    2.6973

  Columns 65 through 72

    2.6977    2.6980    2.6983    2.6986    2.6988    2.6991    2.6994    2.6996

  Columns 73 through 80

    2.6999    2.7001    2.7004    2.7006    2.7008    2.7011    2.7013    2.7015

  Columns 81 through 88

    2.7017    2.7019    2.7021    2.7023    2.7025    2.7026    2.7028    2.7030

  Columns 89 through 96

    2.7032    2.7033    2.7035    2.7037    2.7038    2.7040    2.7041    2.7043

  Columns 97 through 100

    2.7044    2.7045    2.7047    2.7048

(n.^3-2*n.^2+4)/(2*n.^3+n.^2+10*n+14)

ans =

    0.4852

(n.^3-2.*n.^2+4)/(2.*n.^3+n.^2+10.*n+14)

ans =

    0.4852

(n.^3-2*n.^2+4)/(2*n.^3+n.^2+10*n+14)

ans =

    0.4852

(n.^3-2*n.^2+4)./(2*n.^3+n.^2+10*n+14)

ans =

  Columns 1 through 8

    0.1111    0.0741    0.1215    0.1818    0.2330    0.2731    0.3040    0.3283

  Columns 9 through 16

    0.3475    0.3631    0.3760    0.3867    0.3958    0.4036    0.4103    0.4161

  Columns 17 through 24

    0.4213    0.4259    0.4300    0.4336    0.4369    0.4399    0.4426    0.4451

  Columns 25 through 32

    0.4474    0.4495    0.4514    0.4532    0.4549    0.4565    0.4579    0.4593

  Columns 33 through 40

    0.4606    0.4618    0.4629    0.4640    0.4650    0.4659    0.4668    0.4677

  Columns 41 through 48

    0.4685    0.4693    0.4700    0.4707    0.4714    0.4720    0.4726    0.4732

  Columns 49 through 56

    0.4738    0.4743    0.4748    0.4753    0.4758    0.4762    0.4767    0.4771

  Columns 57 through 64

    0.4775    0.4779    0.4783    0.4787    0.4790    0.4794    0.4797    0.4800

  Columns 65 through 72

    0.4803    0.4807    0.4809    0.4812    0.4815    0.4818    0.4820    0.4823

  Columns 73 through 80

    0.4825    0.4828    0.4830    0.4832    0.4835    0.4837    0.4839    0.4841

  Columns 81 through 88

    0.4843    0.4845    0.4847    0.4849    0.4850    0.4852    0.4854    0.4856

  Columns 89 through 96

    0.4857    0.4859    0.4860    0.4862    0.4863    0.4865    0.4866    0.4868

  Columns 97 through 100

    0.4869    0.4871    0.4872    0.4873

factorial(n)

ans =

  1.0e+157 *

  Columns 1 through 8

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 9 through 16

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 17 through 24

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 25 through 32

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 33 through 40

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 41 through 48

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 49 through 56

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 57 through 64

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 65 through 72

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 73 through 80

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 81 through 88

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 89 through 96

    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 97 through 100

    0.0000    0.0009    0.0933    9.3326

m=1:20

m =

  Columns 1 through 14

     1     2     3     4     5     6     7     8     9    10    11    12    13    14

  Columns 15 through 20

    15    16    17    18    19    20

sum(1./factorial(i))
{??? Error using ==> <a href="matlab: opentoline('C:\Program Files\MATLAB\R2010b\toolbox\matlab\specfun\factorial.m',17,0)">factorial at 17</a>
N must be a matrix of non-negative integers.
} 
sum(1./factorial(m))

ans =

    1.7183

sum(2^m./factorial(m))
{??? Error using ==> mpower
Inputs must be a scalar and a square matrix.
} 
sum(2.^m./factorial(m))

ans =

    6.3891

m=1:40

m =

  Columns 1 through 14

     1     2     3     4     5     6     7     8     9    10    11    12    13    14

  Columns 15 through 28

    15    16    17    18    19    20    21    22    23    24    25    26    27    28

  Columns 29 through 40

    29    30    31    32    33    34    35    36    37    38    39    40

sum((-1).^m./factorial(2*m+1))

ans =

   -0.1585

m=1:200

m =

  Columns 1 through 14

     1     2     3     4     5     6     7     8     9    10    11    12    13    14

  Columns 15 through 28

    15    16    17    18    19    20    21    22    23    24    25    26    27    28

  Columns 29 through 42

    29    30    31    32    33    34    35    36    37    38    39    40    41    42

  Columns 43 through 56

    43    44    45    46    47    48    49    50    51    52    53    54    55    56

  Columns 57 through 70

    57    58    59    60    61    62    63    64    65    66    67    68    69    70

  Columns 71 through 84

    71    72    73    74    75    76    77    78    79    80    81    82    83    84

  Columns 85 through 98

    85    86    87    88    89    90    91    92    93    94    95    96    97    98

  Columns 99 through 112

    99   100   101   102   103   104   105   106   107   108   109   110   111   112

  Columns 113 through 126

   113   114   115   116   117   118   119   120   121   122   123   124   125   126

  Columns 127 through 140

   127   128   129   130   131   132   133   134   135   136   137   138   139   140

  Columns 141 through 154

   141   142   143   144   145   146   147   148   149   150   151   152   153   154

  Columns 155 through 168

   155   156   157   158   159   160   161   162   163   164   165   166   167   168

  Columns 169 through 182

   169   170   171   172   173   174   175   176   177   178   179   180   181   182

  Columns 183 through 196

   183   184   185   186   187   188   189   190   191   192   193   194   195   196

  Columns 197 through 200

   197   198   199   200

sum((-1).^m./factorial(m))

ans =

   -0.6321

m=1:1000

m =

  Columns 1 through 7

           1           2           3           4           5           6           7

  Columns 8 through 14

           8           9          10          11          12          13          14

  Columns 15 through 21

          15          16          17          18          19          20          21

  Columns 22 through 28

          22          23          24          25          26          27          28

  Columns 29 through 35

          29          30          31          32          33          34          35

  Columns 36 through 42

          36          37          38          39          40          41          42

  Columns 43 through 49

          43          44          45          46          47          48          49

  Columns 50 through 56

          50          51          52          53          54          55          56

  Columns 57 through 63

          57          58          59          60          61          62          63

  Columns 64 through 70

          64          65          66          67          68          69          70

  Columns 71 through 77

          71          72          73          74          75          76          77

  Columns 78 through 84

          78          79          80          81          82          83          84

  Columns 85 through 91

          85          86          87          88          89          90          91

  Columns 92 through 98

          92          93          94          95          96          97          98

  Columns 99 through 105

          99         100         101         102         103         104         105

  Columns 106 through 112

         106         107         108         109         110         111         112

  Columns 113 through 119

         113         114         115         116         117         118         119

  Columns 120 through 126

         120         121         122         123         124         125         126

  Columns 127 through 133

         127         128         129         130         131         132         133

  Columns 134 through 140

         134         135         136         137         138         139         140

  Columns 141 through 147

         141         142         143         144         145         146         147

  Columns 148 through 154

         148         149         150         151         152         153         154

  Columns 155 through 161

         155         156         157         158         159         160         161

  Columns 162 through 168

         162         163         164         165         166         167         168

  Columns 169 through 175

         169         170         171         172         173         174         175

  Columns 176 through 182

         176         177         178         179         180         181         182

  Columns 183 through 189

         183         184         185         186         187         188         189

  Columns 190 through 196

         190         191         192         193         194         195         196

  Columns 197 through 203

         197         198         199         200         201         202         203

  Columns 204 through 210

         204         205         206         207         208         209         210

  Columns 211 through 217

         211         212         213         214         215         216         217

  Columns 218 through 224

         218         219         220         221         222         223         224

  Columns 225 through 231

         225         226         227         228         229         230         231

  Columns 232 through 238

         232         233         234         235         236         237         238

  Columns 239 through 245

         239         240         241         242         243         244         245

  Columns 246 through 252

         246         247         248         249         250         251         252

  Columns 253 through 259

         253         254         255         256         257         258         259

  Columns 260 through 266

         260         261         262         263         264         265         266

  Columns 267 through 273

         267         268         269         270         271         272         273

  Columns 274 through 280

         274         275         276         277         278         279         280

  Columns 281 through 287

         281         282         283         284         285         286         287

  Columns 288 through 294

         288         289         290         291         292         293         294

  Columns 295 through 301

         295         296         297         298         299         300         301

  Columns 302 through 308

         302         303         304         305         306         307         308

  Columns 309 through 315

         309         310         311         312         313         314         315

  Columns 316 through 322

         316         317         318         319         320         321         322

  Columns 323 through 329

         323         324         325         326         327         328         329

  Columns 330 through 336

         330         331         332         333         334         335         336

  Columns 337 through 343

         337         338         339         340         341         342         343

  Columns 344 through 350

         344         345         346         347         348         349         350

  Columns 351 through 357

         351         352         353         354         355         356         357

  Columns 358 through 364

         358         359         360         361         362         363         364

  Columns 365 through 371

         365         366         367         368         369         370         371

  Columns 372 through 378

         372         373         374         375         376         377         378

  Columns 379 through 385

         379         380         381         382         383         384         385

  Columns 386 through 392

         386         387         388         389         390         391         392

  Columns 393 through 399

         393         394         395         396         397         398         399

  Columns 400 through 406

         400         401         402         403         404         405         406

  Columns 407 through 413

         407         408         409         410         411         412         413

  Columns 414 through 420

         414         415         416         417         418         419         420

  Columns 421 through 427

         421         422         423         424         425         426         427

  Columns 428 through 434

         428         429         430         431         432         433         434

  Columns 435 through 441

         435         436         437         438         439         440         441

  Columns 442 through 448

         442         443         444         445         446         447         448

  Columns 449 through 455

         449         450         451         452         453         454         455

  Columns 456 through 462

         456         457         458         459         460         461         462

  Columns 463 through 469

         463         464         465         466         467         468         469

  Columns 470 through 476

         470         471         472         473         474         475         476

  Columns 477 through 483

         477         478         479         480         481         482         483

  Columns 484 through 490

         484         485         486         487         488         489         490

  Columns 491 through 497

         491         492         493         494         495         496         497

  Columns 498 through 504

         498         499         500         501         502         503         504

  Columns 505 through 511

         505         506         507         508         509         510         511

  Columns 512 through 518

         512         513         514         515         516         517         518

  Columns 519 through 525

         519         520         521         522         523         524         525

  Columns 526 through 532

         526         527         528         529         530         531         532

  Columns 533 through 539

         533         534         535         536         537         538         539

  Columns 540 through 546

         540         541         542         543         544         545         546

  Columns 547 through 553

         547         548         549         550         551         552         553

  Columns 554 through 560

         554         555         556         557         558         559         560

  Columns 561 through 567

         561         562         563         564         565         566         567

  Columns 568 through 574

         568         569         570         571         572         573         574

  Columns 575 through 581

         575         576         577         578         579         580         581

  Columns 582 through 588

         582         583         584         585         586         587         588

  Columns 589 through 595

         589         590         591         592         593         594         595

  Columns 596 through 602

         596         597         598         599         600         601         602

  Columns 603 through 609

         603         604         605         606         607         608         609

  Columns 610 through 616

         610         611         612         613         614         615         616

  Columns 617 through 623

         617         618         619         620         621         622         623

  Columns 624 through 630

         624         625         626         627         628         629         630

  Columns 631 through 637

         631         632         633         634         635         636         637

  Columns 638 through 644

         638         639         640         641         642         643         644

  Columns 645 through 651

         645         646         647         648         649         650         651

  Columns 652 through 658

         652         653         654         655         656         657         658

  Columns 659 through 665

         659         660         661         662         663         664         665

  Columns 666 through 672

         666         667         668         669         670         671         672

  Columns 673 through 679

         673         674         675         676         677         678         679

  Columns 680 through 686

         680         681         682         683         684         685         686

  Columns 687 through 693

         687         688         689         690         691         692         693

  Columns 694 through 700

         694         695         696         697         698         699         700

  Columns 701 through 707

         701         702         703         704         705         706         707

  Columns 708 through 714

         708         709         710         711         712         713         714

  Columns 715 through 721

         715         716         717         718         719         720         721

  Columns 722 through 728

         722         723         724         725         726         727         728

  Columns 729 through 735

         729         730         731         732         733         734         735

  Columns 736 through 742

         736         737         738         739         740         741         742

  Columns 743 through 749

         743         744         745         746         747         748         749

  Columns 750 through 756

         750         751         752         753         754         755         756

  Columns 757 through 763

         757         758         759         760         761         762         763

  Columns 764 through 770

         764         765         766         767         768         769         770

  Columns 771 through 777

         771         772         773         774         775         776         777

  Columns 778 through 784

         778         779         780         781         782         783         784

  Columns 785 through 791

         785         786         787         788         789         790         791

  Columns 792 through 798

         792         793         794         795         796         797         798

  Columns 799 through 805

         799         800         801         802         803         804         805

  Columns 806 through 812

         806         807         808         809         810         811         812

  Columns 813 through 819

         813         814         815         816         817         818         819

  Columns 820 through 826

         820         821         822         823         824         825         826

  Columns 827 through 833

         827         828         829         830         831         832         833

  Columns 834 through 840

         834         835         836         837         838         839         840

  Columns 841 through 847

         841         842         843         844         845         846         847

  Columns 848 through 854

         848         849         850         851         852         853         854

  Columns 855 through 861

         855         856         857         858         859         860         861

  Columns 862 through 868

         862         863         864         865         866         867         868

  Columns 869 through 875

         869         870         871         872         873         874         875

  Columns 876 through 882

         876         877         878         879         880         881         882

  Columns 883 through 889

         883         884         885         886         887         888         889

  Columns 890 through 896

         890         891         892         893         894         895         896

  Columns 897 through 903

         897         898         899         900         901         902         903

  Columns 904 through 910

         904         905         906         907         908         909         910

  Columns 911 through 917

         911         912         913         914         915         916         917

  Columns 918 through 924

         918         919         920         921         922         923         924

  Columns 925 through 931

         925         926         927         928         929         930         931

  Columns 932 through 938

         932         933         934         935         936         937         938

  Columns 939 through 945

         939         940         941         942         943         944         945

  Columns 946 through 952

         946         947         948         949         950         951         952

  Columns 953 through 959

         953         954         955         956         957         958         959

  Columns 960 through 966

         960         961         962         963         964         965         966

  Columns 967 through 973

         967         968         969         970         971         972         973

  Columns 974 through 980

         974         975         976         977         978         979         980

  Columns 981 through 987

         981         982         983         984         985         986         987

  Columns 988 through 994

         988         989         990         991         992         993         994

  Columns 995 through 1000

         995         996         997         998         999        1000

sum(1./factorial(m.^2))

ans =

    1.0417

m=1:50

m =

  Columns 1 through 14

     1     2     3     4     5     6     7     8     9    10    11    12    13    14

  Columns 15 through 28

    15    16    17    18    19    20    21    22    23    24    25    26    27    28

  Columns 29 through 42

    29    30    31    32    33    34    35    36    37    38    39    40    41    42

  Columns 43 through 50

    43    44    45    46    47    48    49    50

sum(m.^2./factorial(2.^i))
{??? Error using ==> <a href="matlab: opentoline('C:\Program Files\MATLAB\R2010b\toolbox\matlab\specfun\factorial.m',17,0)">factorial at 17</a>
N must be a matrix of non-negative integers.
} 
sum(m.^2./factorial(2.^m))

ans =

    0.6669

A=[5 6 7 3 4 5 7; 5 6 3 3 2 4 5; 7 5 6 3 4 6 7 ; 7 4 2 4 5 6 7 ; 8 5 3 5 6 7 8 ; 9 54 3 2 1 56 6; 7 3 2 1 2 5 6]

A =

     5     6     7     3     4     5     7
     5     6     3     3     2     4     5
     7     5     6     3     4     6     7
     7     4     2     4     5     6     7
     8     5     3     5     6     7     8
     9    54     3     2     1    56     6
     7     3     2     1     2     5     6

A(3,4)

ans =

     3

A(6,4)=pi

A =

    5.0000    6.0000    7.0000    3.0000    4.0000    5.0000    7.0000
    5.0000    6.0000    3.0000    3.0000    2.0000    4.0000    5.0000
    7.0000    5.0000    6.0000    3.0000    4.0000    6.0000    7.0000
    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000    7.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000    8.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000    6.0000
    7.0000    3.0000    2.0000    1.0000    2.0000    5.0000    6.0000

sum(1./m.^2)

ans =

    1.6251

sum(1./(m.^2))

ans =

    1.6251

A

A =

    5.0000    6.0000    7.0000    3.0000    4.0000    5.0000    7.0000
    5.0000    6.0000    3.0000    3.0000    2.0000    4.0000    5.0000
    7.0000    5.0000    6.0000    3.0000    4.0000    6.0000    7.0000
    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000    7.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000    8.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000    6.0000
    7.0000    3.0000    2.0000    1.0000    2.0000    5.0000    6.0000

sum(m)

ans =

        1275


1275^2

ans =

     1625625

2^1275

ans =

   Inf

size(A)

ans =

     7     7

B=A(1:3, 2:6)

B =

     6     7     3     4     5
     6     3     3     2     4
     5     6     3     4     6

C=A(1:7, 1:3)

C =

     5     6     7
     5     6     3
     7     5     6
     7     4     2
     8     5     3
     9    54     3
     7     3     2

C=A(:, 1:3)

C =

     5     6     7
     5     6     3
     7     5     6
     7     4     2
     8     5     3
     9    54     3
     7     3     2

D=(4:,:)
??? D=(4:,:)
         |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=(4:7,:)
??? D=(4:7,:)
          |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=(4:7, :)
??? D=(4:7, :)
          |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=(4:7,1:7)
??? D=(4:7,1:7)
          |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=(4:7,1:7)
??? D=(4:7,1:7)
          |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=A(4:7, :)

D =

    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000    7.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000    8.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000    6.0000
    7.0000    3.0000    2.0000    1.0000    2.0000    5.0000    6.0000

D=A(4:,:)
??? D=A(4:,:)
          |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=A(47:,:)
??? D=A(47:,:)
           |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
D=A(4:7,:)

D =

    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000    7.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000    8.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000    6.0000
    7.0000    3.0000    2.0000    1.0000    2.0000    5.0000    6.0000

D=A(1 3 5], [2 4])
??? D=A(1 3 5], [2 4])
          |
{Error: Unexpected MATLAB expression.
} 
D=A([1 3 5], [2 4])

D =

     6     3
     5     3
     5     5

E=A([1 2 1 3 1 5], :)

E =

     5     6     7     3     4     5     7
     5     6     3     3     2     4     5
     5     6     7     3     4     5     7
     7     5     6     3     4     6     7
     5     6     7     3     4     5     7
     8     5     3     5     6     7     8

F=(logical([1 0 1 0 0 1 0], logical([0 1 0 1 5]))
??? F=(logical([1 0 1 0 0 1 0], logical([0 1 0 1 5]))
                                                     |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
F=(logical([1 0 1 0 0 1 0]), logical([0 1 0 1 5]))
??? F=(logical([1 0 1 0 0 1 0]), logical([0 1 0 1 5]))
                               |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
l=logical([1 0 1 0 0 1])

l =

     1     0     1     0     0     1

l=logical(A[1 0 1 0 0 1])
??? l=logical(A[1 0 1 0 0 1])
               |
{Error: Unbalanced or unexpected parenthesis or bracket.
} 
l=A logical([1 0 1 0 0 1])
??? l=A logical([1 0 1 0 0 1])
        |
{Error: Unexpected MATLAB expression.
} 
logical(v)
{??? Undefined function or variable 'v'.
} 
F=A(logical([1 0 1 0 0 1 0]), logical([0 1 0 1 5]))

F =

    6.0000    3.0000    4.0000
    5.0000    3.0000    4.0000
   54.0000    3.1416    1.0000

A

A =

    5.0000    6.0000    7.0000    3.0000    4.0000    5.0000    7.0000
    5.0000    6.0000    3.0000    3.0000    2.0000    4.0000    5.0000
    7.0000    5.0000    6.0000    3.0000    4.0000    6.0000    7.0000
    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000    7.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000    8.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000    6.0000
    7.0000    3.0000    2.0000    1.0000    2.0000    5.0000    6.0000

V=A(:)

V =

    5.0000
    5.0000
    7.0000
    7.0000
    8.0000
    9.0000
    7.0000
    6.0000
    6.0000
    5.0000
    4.0000
    5.0000
   54.0000
    3.0000
    7.0000
    3.0000
    6.0000
    2.0000
    3.0000
    3.0000
    2.0000
    3.0000
    3.0000
    3.0000
    4.0000
    5.0000
    3.1416
    1.0000
    4.0000
    2.0000
    4.0000
    5.0000
    6.0000
    1.0000
    2.0000
    5.0000
    4.0000
    6.0000
    6.0000
    7.0000
   56.0000
    5.0000
    7.0000
    5.0000
    7.0000
    7.0000
    8.0000
    6.0000
    6.0000

G=A(1:6, 1:6)

G =

    5.0000    6.0000    7.0000    3.0000    4.0000    5.0000
    5.0000    6.0000    3.0000    3.0000    2.0000    4.0000
    7.0000    5.0000    6.0000    3.0000    4.0000    6.0000
    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000

A(7,7)=[]
{??? Subscripted assignment dimension mismatch.
} 
A(7,)=[]
??? A(7,)=[]
        |
{Error: Unbalanced or unexpected parenthesis or bracket.
} 
G=reshape(A, 6, 6)
{??? Error using ==> reshape
To RESHAPE the number of elements must not change.
} 
G=reshape(A, 1, 1)
{??? Error using ==> reshape
To RESHAPE the number of elements must not change.
} 
G=reshape(A, p,q )
{??? Undefined function or variable 'p'.
} 
help reshape
 RESHAPE Reshape array.
    RESHAPE(X,M,N) returns the M-by-N matrix whose elements
    are taken columnwise from X.  An error results if X does
    not have M*N elements.
 
    RESHAPE(X,M,N,P,...) returns an N-D array with the same
    elements as X but reshaped to have the size M-by-N-by-P-by-...
    M*N*P*... must be the same as PROD(SIZE(X)).
 
    RESHAPE(X,[M N P ...]) is the same thing.
 
    RESHAPE(X,...,[],...) calculates the length of the dimension
    represented by [], such that the product of the dimensions 
    equals PROD(SIZE(X)). PROD(SIZE(X)) must be evenly divisible 
    by the product of the known dimensions. You can use only one 
    occurrence of [].
 
    In general, RESHAPE(X,SIZ) returns an N-D array with the same
    elements as X but reshaped to the size SIZ.  PROD(SIZ) must be
    the same as PROD(SIZE(X)). 
 
    See also <a href="matlab:help squeeze">squeeze</a>, <a href="matlab:help shiftdim">shiftdim</a>, <a href="matlab:help colon">colon</a>.

    Overloaded methods:
       <a href="matlab:help InputOutputModel/reshape">InputOutputModel/reshape</a>
       <a href="matlab:help codistributed/reshape">codistributed/reshape</a>
       <a href="matlab:help sym/reshape">sym/reshape</a>

    Reference page in Help browser
       <a href="matlab:doc reshape">doc reshape</a>

G

G =

    5.0000    6.0000    7.0000    3.0000    4.0000    5.0000
    5.0000    6.0000    3.0000    3.0000    2.0000    4.0000
    7.0000    5.0000    6.0000    3.0000    4.0000    6.0000
    7.0000    4.0000    2.0000    4.0000    5.0000    6.0000
    8.0000    5.0000    3.0000    5.0000    6.0000    7.0000
    9.0000   54.0000    3.0000    3.1416    1.0000   56.0000

reshape(G, 4, 9)

ans =

  Columns 1 through 8

    5.0000    8.0000    5.0000    7.0000    3.0000    3.0000    4.0000    6.0000
    5.0000    9.0000    4.0000    3.0000    3.0000    4.0000    2.0000    1.0000
    7.0000    6.0000    5.0000    6.0000    3.0000    5.0000    4.0000    5.0000
    7.0000    6.0000   54.0000    2.0000    3.0000    3.1416    5.0000    4.0000

  Column 9

    6.0000
    6.0000
    7.0000
   56.0000

reshape(G, 9, 4)

ans =

    5.0000    4.0000    3.0000    5.0000
    5.0000    5.0000    3.0000    6.0000
    7.0000   54.0000    3.0000    1.0000
    7.0000    7.0000    4.0000    5.0000
    8.0000    3.0000    5.0000    4.0000
    9.0000    6.0000    3.1416    6.0000
    6.0000    2.0000    4.0000    6.0000
    6.0000    3.0000    2.0000    7.0000
    5.0000    3.0000    4.0000   56.0000

reshape(G, 2, 18)

ans =

  Columns 1 through 8

    5.0000    7.0000    8.0000    6.0000    5.0000    5.0000    7.0000    6.0000
    5.0000    7.0000    9.0000    6.0000    4.0000   54.0000    3.0000    2.0000

  Columns 9 through 16

    3.0000    3.0000    3.0000    5.0000    4.0000    4.0000    6.0000    5.0000
    3.0000    3.0000    4.0000    3.1416    2.0000    5.0000    1.0000    4.0000

  Columns 17 through 18

    6.0000    7.0000
    6.0000   56.0000

reshape(G, 18, 2)

ans =

    5.0000    3.0000
    5.0000    3.0000
    7.0000    3.0000
    7.0000    4.0000
    8.0000    5.0000
    9.0000    3.1416
    6.0000    4.0000
    6.0000    2.0000
    5.0000    4.0000
    4.0000    5.0000
    5.0000    6.0000
   54.0000    1.0000
    7.0000    5.0000
    3.0000    4.0000
    6.0000    6.0000
    2.0000    6.0000
    3.0000    7.0000
    3.0000   56.0000

help reshape
 RESHAPE Reshape array.
    RESHAPE(X,M,N) returns the M-by-N matrix whose elements
    are taken columnwise from X.  An error results if X does
    not have M*N elements.
 
    RESHAPE(X,M,N,P,...) returns an N-D array with the same
    elements as X but reshaped to have the size M-by-N-by-P-by-...
    M*N*P*... must be the same as PROD(SIZE(X)).
 
    RESHAPE(X,[M N P ...]) is the same thing.
 
    RESHAPE(X,...,[],...) calculates the length of the dimension
    represented by [], such that the product of the dimensions 
    equals PROD(SIZE(X)). PROD(SIZE(X)) must be evenly divisible 
    by the product of the known dimensions. You can use only one 
    occurrence of [].
 
    In general, RESHAPE(X,SIZ) returns an N-D array with the same
    elements as X but reshaped to the size SIZ.  PROD(SIZ) must be
    the same as PROD(SIZE(X)). 
 
    See also <a href="matlab:help squeeze">squeeze</a>, <a href="matlab:help shiftdim">shiftdim</a>, <a href="matlab:help colon">colon</a>.

    Overloaded methods:
       <a href="matlab:help InputOutputModel/reshape">InputOutputModel/reshape</a>
       <a href="matlab:help codistributed/reshape">codistributed/reshape</a>
       <a href="matlab:help sym/reshape">sym/reshape</a>

    Reference page in Help browser
       <a href="matlab:doc reshape">doc reshape</a>

help array

array not found.

Use the Help browser search field to <a href="matlab:docsearch array">search the documentation</a>, or
type "<a href="matlab:help help">help help</a>" for help command options, such as help for methods.

G^t
{??? Undefined function or variable 't'.
} 
G94=reshape(G, 9, 4)

G94 =

    5.0000    4.0000    3.0000    5.0000
    5.0000    5.0000    3.0000    6.0000
    7.0000   54.0000    3.0000    1.0000
    7.0000    7.0000    4.0000    5.0000
    8.0000    3.0000    5.0000    4.0000
    9.0000    6.0000    3.1416    6.0000
    6.0000    2.0000    4.0000    6.0000
    6.0000    3.0000    2.0000    7.0000
    5.0000    3.0000    4.0000   56.0000

G49=reshape(G, 4, 9)

G49 =

  Columns 1 through 8

    5.0000    8.0000    5.0000    7.0000    3.0000    3.0000    4.0000    6.0000
    5.0000    9.0000    4.0000    3.0000    3.0000    4.0000    2.0000    1.0000
    7.0000    6.0000    5.0000    6.0000    3.0000    5.0000    4.0000    5.0000
    7.0000    6.0000   54.0000    2.0000    3.0000    3.1416    5.0000    4.0000

  Column 9

    6.0000
    6.0000
    7.0000
   56.0000

G49'

ans =

    5.0000    5.0000    7.0000    7.0000
    8.0000    9.0000    6.0000    6.0000
    5.0000    4.0000    5.0000   54.0000
    7.0000    3.0000    6.0000    2.0000
    3.0000    3.0000    3.0000    3.0000
    3.0000    4.0000    5.0000    3.1416
    4.0000    2.0000    4.0000    5.0000
    6.0000    1.0000    5.0000    4.0000
    6.0000    6.0000    7.0000   56.0000

G49'-G94

ans =

         0    1.0000    4.0000    2.0000
    3.0000    4.0000    3.0000         0
   -2.0000  -50.0000    2.0000   53.0000
         0   -4.0000    2.0000   -3.0000
   -5.0000         0   -2.0000   -1.0000
   -6.0000   -2.0000    1.8584   -2.8584
   -2.0000         0         0   -1.0000
         0   -2.0000    3.0000   -3.0000
    1.0000    3.0000    3.0000         0

G94'-G49

ans =

  Columns 1 through 8

         0   -3.0000    2.0000         0    5.0000    6.0000    2.0000         0
   -1.0000   -4.0000   50.0000    4.0000         0    2.0000         0    2.0000
   -4.0000   -3.0000   -2.0000   -2.0000    2.0000   -1.8584         0   -3.0000
   -2.0000         0  -53.0000    3.0000    1.0000    2.8584    1.0000    3.0000

  Column 9

   -1.0000
   -3.0000
   -3.0000
         0

H=A(logical([1 0 1 1 0 1 1], logical([1 1 0 1 1 1 1]))
??? H=A(logical([1 0 1 1 0 1 1], logical([1 1 0 1 1 1 1]))
                                                          |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
H=A(logical([1 0 1 1 0 1 1], logical([1 1 0 1 1 1 1])))
{??? Error using ==> logical
Too many input arguments.
} 
H=A(logical([1 0 1 1 0 1 1], logical([1 1 0 1 1 1 1])))
{??? Error using ==> logical
Too many input arguments.
} 
H=A(logical([1 0 1 1 0 1 1]), logical([1 1 0 1 1 1 1]))

H =

    5.0000    6.0000    3.0000    4.0000    5.0000    7.0000
    7.0000    5.0000    3.0000    4.0000    6.0000    7.0000
    7.0000    4.0000    4.0000    5.0000    6.0000    7.0000
    9.0000   54.0000    3.1416    1.0000   56.0000    6.0000
    7.0000    3.0000    1.0000    2.0000    5.0000    6.0000

eye(4,5)

ans =

     1     0     0     0     0
     0     1     0     0     0
     0     0     1     0     0
     0     0     0     1     0

zeros(5, 8)

ans =

     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0

ones(5, 7
??? ones(5, 7
             |
{Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.
} 
ones(5, 7)

ans =

     1     1     1     1     1     1     1
     1     1     1     1     1     1     1
     1     1     1     1     1     1     1
     1     1     1     1     1     1     1
     1     1     1     1     1     1     1

rand(4, 6)

ans =

    0.8147    0.6324    0.9575    0.9572    0.4218    0.6557
    0.9058    0.0975    0.9649    0.4854    0.9157    0.0357
    0.1270    0.2785    0.1576    0.8003    0.7922    0.8491
    0.9134    0.5469    0.9706    0.1419    0.9595    0.9340

randn(5, 8)

ans =

    0.4889   -0.7873   -2.9443   -1.7115   -0.8649    1.1093   -0.0068    1.1174
    1.0347    0.8884    1.4384   -0.1022   -0.0301   -0.8637    1.5326   -1.0891
    0.7269   -1.1471    0.3252   -0.2414   -0.1649    0.0774   -0.7697    0.0326
   -0.3034   -1.0689   -0.7549    0.3192    0.6277   -1.2141    0.3714    0.5525
    0.2939   -0.8095    1.3703    0.3129    1.0933   -1.1135   -0.2256    1.1006

diag(v)
{??? Undefined function or variable 'v'.
} 
diag(6)

ans =

     6

diag(A)

ans =

     5
     6
     6
     4
     6
    56
     6

diag(A, 6)

ans =

     7

diag([3 6 4 3 8])

ans =

     3     0     0     0     0
     0     6     0     0     0
     0     0     4     0     0
     0     0     0     3     0
     0     0     0     0     8

diag(A, 3)

ans =

     3
     2
     6
     7

diag(A, 6)

ans =

     7

diag(A, 4)

ans =

     4
     4
     7

diag(1*ones(10,1),0)+diag(2*ones(9,1),1)

ans =

     1     2     0     0     0     0     0     0     0     0
     0     1     2     0     0     0     0     0     0     0
     0     0     1     2     0     0     0     0     0     0
     0     0     0     1     2     0     0     0     0     0
     0     0     0     0     1     2     0     0     0     0
     0     0     0     0     0     1     2     0     0     0
     0     0     0     0     0     0     1     2     0     0
     0     0     0     0     0     0     0     1     2     0
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),1)
{??? Error using ==> plus
Matrix dimensions must agree.
} 
diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)

ans =

     1     2     3     0     0     0     0     0     0     0
     0     1     2     3     0     0     0     0     0     0
     0     0     1     2     3     0     0     0     0     0
     0     0     0     1     2     3     0     0     0     0
     0     0     0     0     1     2     3     0     0     0
     0     0     0     0     0     1     2     3     0     0
     0     0     0     0     0     0     1     2     3     0
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)

ans =

     1     2     3     4     0     0     0     0     0     0
     0     1     2     3     4     0     0     0     0     0
     0     0     1     2     3     4     0     0     0     0
     0     0     0     1     2     3     4     0     0     0
     0     0     0     0     1     2     3     4     0     0
     0     0     0     0     0     1     2     3     4     0
     0     0     0     0     0     0     1     2     3     4
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)

ans =

     1     2     3     4     5     6     0     0     0     0
     0     1     2     3     4     5     6     0     0     0
     0     0     1     2     3     4     5     6     0     0
     0     0     0     1     2     3     4     5     6     0
     0     0     0     0     1     2     3     4     5     6
     0     0     0     0     0     1     2     3     4     5
     0     0     0     0     0     0     1     2     3     4
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

P=diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)

P =

     1     2     3     4     5     6     0     0     0     0
     0     1     2     3     4     5     6     0     0     0
     0     0     1     2     3     4     5     6     0     0
     0     0     0     1     2     3     4     5     6     0
     0     0     0     0     1     2     3     4     5     6
     0     0     0     0     0     1     2     3     4     5
     0     0     0     0     0     0     1     2     3     4
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

P=diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)+diag(7*ones(4,1),6)+diag(8*ones(3,1),7)+diag(9*ones(2,1),8)

P =

     1     2     3     4     5     6     7     8     9     0
     0     1     2     3     4     5     6     7     8     9
     0     0     1     2     3     4     5     6     7     8
     0     0     0     1     2     3     4     5     6     7
     0     0     0     0     1     2     3     4     5     6
     0     0     0     0     0     1     2     3     4     5
     0     0     0     0     0     0     1     2     3     4
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

P=diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)+diag(7*ones(4,1),6)+diag(8*ones(3,1),7)+diag(9*ones(2,1),8)+diag(10*ones(1,1),9)

P =

     1     2     3     4     5     6     7     8     9    10
     0     1     2     3     4     5     6     7     8     9
     0     0     1     2     3     4     5     6     7     8
     0     0     0     1     2     3     4     5     6     7
     0     0     0     0     1     2     3     4     5     6
     0     0     0     0     0     1     2     3     4     5
     0     0     0     0     0     0     1     2     3     4
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

P

P =

     1     2     3     4     5     6     7     8     9    10
     0     1     2     3     4     5     6     7     8     9
     0     0     1     2     3     4     5     6     7     8
     0     0     0     1     2     3     4     5     6     7
     0     0     0     0     1     2     3     4     5     6
     0     0     0     0     0     1     2     3     4     5
     0     0     0     0     0     0     1     2     3     4
     0     0     0     0     0     0     0     1     2     3
     0     0     0     0     0     0     0     0     1     2
     0     0     0     0     0     0     0     0     0     1

M=rand(6,5), N=rand(6,5)

M =

    0.9593    0.2543    0.2511    0.5497    0.5678
    0.5472    0.8143    0.6160    0.9172    0.0759
    0.1386    0.2435    0.4733    0.2858    0.0540
    0.1493    0.9293    0.3517    0.7572    0.5308
    0.2575    0.3500    0.8308    0.7537    0.7792
    0.8407    0.1966    0.5853    0.3804    0.9340


N =

    0.1299    0.7943    0.6541    0.9133    0.4427
    0.5688    0.3112    0.6892    0.1524    0.1067
    0.4694    0.5285    0.7482    0.8258    0.9619
    0.0119    0.1656    0.4505    0.5383    0.0046
    0.3371    0.6020    0.0838    0.9961    0.7749
    0.1622    0.2630    0.2290    0.0782    0.8173

M*N
{??? Error using ==> mtimes
Inner matrix dimensions must agree.
} 
N.*N

ans =

    0.0169    0.6309    0.4278    0.8342    0.1960
    0.3236    0.0969    0.4750    0.0232    0.0114
    0.2203    0.2793    0.5597    0.6820    0.9252
    0.0001    0.0274    0.2030    0.2898    0.0000
    0.1137    0.3624    0.0070    0.9923    0.6005
    0.0263    0.0692    0.0524    0.0061    0.6680

M.*N

ans =

    0.1246    0.2020    0.1642    0.5021    0.2514
    0.3113    0.2534    0.4246    0.1398    0.0081
    0.0651    0.1287    0.3541    0.2361    0.0519
    0.0018    0.1539    0.1584    0.4076    0.0025
    0.0868    0.2107    0.0696    0.7508    0.6038
    0.1363    0.0517    0.1340    0.0297    0.7634

P=diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)+diag(7*ones(4,1),6)+diag(8*ones(3,1),7)+diag(9*ones(2,1),8)+diag(10*ones(1,1),9)+diag(2*ones(9,1),-1)

P =

     1     2     3     4     5     6     7     8     9    10
     2     1     2     3     4     5     6     7     8     9
     0     2     1     2     3     4     5     6     7     8
     0     0     2     1     2     3     4     5     6     7
     0     0     0     2     1     2     3     4     5     6
     0     0     0     0     2     1     2     3     4     5
     0     0     0     0     0     2     1     2     3     4
     0     0     0     0     0     0     2     1     2     3
     0     0     0     0     0     0     0     2     1     2
     0     0     0     0     0     0     0     0     2     1

P=diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)+diag(7*ones(4,1),6)+diag(8*ones(3,1),7)+diag(9*ones(2,1),8)+diag(10*ones(1,1),9)+diag(2*ones(9,1),1)+diag(3*ones(8,1),-2)+diag(4*ones(7,1),-3)+diag(5*ones(6,1),-4)+diag(6*ones(5,1),-5)+diag(7*ones(4,1),-6)+diag(8*ones(3,1),-7)+diag(9*ones(2,1),-8)+diag(10*ones(1,1),-9)

P =

     1     4     3     4     5     6     7     8     9    10
     0     1     4     3     4     5     6     7     8     9
     3     0     1     4     3     4     5     6     7     8
     4     3     0     1     4     3     4     5     6     7
     5     4     3     0     1     4     3     4     5     6
     6     5     4     3     0     1     4     3     4     5
     7     6     5     4     3     0     1     4     3     4
     8     7     6     5     4     3     0     1     4     3
     9     8     7     6     5     4     3     0     1     4
    10     9     8     7     6     5     4     3     0     1

P=diag(1*ones(10,1),0)+diag(2*ones(9,1),1)+diag(3*ones(8,1),2)+diag(4*ones(7,1),3)+diag(5*ones(6,1),4)+diag(6*ones(5,1),5)+diag(7*ones(4,1),6)+diag(8*ones(3,1),7)+diag(9*ones(2,1),8)+diag(10*ones(1,1),9)+diag(2*ones(9,1),-1)

P =

     1     2     3     4     5     6     7     8     9    10
     2     1     2     3     4     5     6     7     8     9
     0     2     1     2     3     4     5     6     7     8
     0     0     2     1     2     3     4     5     6     7
     0     0     0     2     1     2     3     4     5     6
     0     0     0     0     2     1     2     3     4     5
     0     0     0     0     0     2     1     2     3     4
     0     0     0     0     0     0     2     1     2     3
     0     0     0     0     0     0     0     2     1     2
     0     0     0     0     0     0     0     0     2     1

C=rand(10,10)

C =

  Columns 1 through 8

    0.8687    0.1361    0.0760    0.4893    0.1320    0.1690    0.1835    0.3063
    0.0844    0.8693    0.2399    0.3377    0.9421    0.6491    0.3685    0.5085
    0.3998    0.5797    0.1233    0.9001    0.9561    0.7317    0.6256    0.5108
    0.2599    0.5499    0.1839    0.3692    0.5752    0.6477    0.7802    0.8176
    0.8001    0.1450    0.2400    0.1112    0.0598    0.4509    0.0811    0.7948
    0.4314    0.8530    0.4173    0.7803    0.2348    0.5470    0.9294    0.6443
    0.9106    0.6221    0.0497    0.3897    0.3532    0.2963    0.7757    0.3786
    0.1818    0.3510    0.9027    0.2417    0.8212    0.7447    0.4868    0.8116
    0.2638    0.5132    0.9448    0.4039    0.0154    0.1890    0.4359    0.5328
    0.1455    0.4018    0.4909    0.0965    0.0430    0.6868    0.4468    0.3507

  Columns 9 through 10

    0.9390    0.1948
    0.8759    0.2259
    0.5502    0.1707
    0.6225    0.2277
    0.5870    0.4357
    0.2077    0.3111
    0.3012    0.9234
    0.4709    0.4302
    0.2305    0.1848
    0.8443    0.9049

d=(10)

d =

    10

d=rand(10)

d =

  Columns 1 through 8

    0.9797    0.1174    0.7303    0.6241    0.2619    0.9037    0.6099    0.1679
    0.4389    0.2967    0.4886    0.6791    0.3354    0.8909    0.6177    0.9787
    0.1111    0.3188    0.5785    0.3955    0.6797    0.3342    0.8594    0.7127
    0.2581    0.4242    0.2373    0.3674    0.1366    0.6987    0.8055    0.5005
    0.4087    0.5079    0.4588    0.9880    0.7212    0.1978    0.5767    0.4711
    0.5949    0.0855    0.9631    0.0377    0.1068    0.0305    0.1829    0.0596
    0.2622    0.2625    0.5468    0.8852    0.6538    0.7441    0.2399    0.6820
    0.6028    0.8010    0.5211    0.9133    0.4942    0.5000    0.8865    0.0424
    0.7112    0.0292    0.2316    0.7962    0.7791    0.4799    0.0287    0.0714
    0.2217    0.9289    0.4889    0.0987    0.7150    0.9047    0.4899    0.5216

  Columns 9 through 10

    0.0967    0.4538
    0.8181    0.4324
    0.8175    0.8253
    0.7224    0.0835
    0.1499    0.1332
    0.6596    0.1734
    0.5186    0.3909
    0.9730    0.8314
    0.6490    0.8034
    0.8003    0.0605

d=rand(10:1)

d =

     []

d=rand(10,1)

d =

    0.3993
    0.5269
    0.4168
    0.6569
    0.6280
    0.2920
    0.4317
    0.0155
    0.9841
    0.1672

C=rand(10)

C =

  Columns 1 through 8

    0.1062    0.4228    0.6665    0.3689    0.1206    0.9827    0.0225    0.6999
    0.3724    0.5479    0.1781    0.4607    0.5895    0.7302    0.4253    0.6385
    0.1981    0.9427    0.1280    0.9816    0.2262    0.3439    0.3127    0.0336
    0.4897    0.4177    0.9991    0.1564    0.3846    0.5841    0.1615    0.0688
    0.3395    0.9831    0.1711    0.8555    0.5830    0.1078    0.1788    0.3196
    0.9516    0.3015    0.0326    0.6448    0.2518    0.9063    0.4229    0.5309
    0.9203    0.7011    0.5612    0.3763    0.2904    0.8797    0.0942    0.6544
    0.0527    0.6663    0.8819    0.1909    0.6171    0.8178    0.5985    0.4076
    0.7379    0.5391    0.6692    0.4283    0.2653    0.2607    0.4709    0.8200
    0.2691    0.6981    0.1904    0.4820    0.8244    0.5944    0.6959    0.7184

  Columns 9 through 10

    0.9686    0.2810
    0.5313    0.4401
    0.3251    0.5271
    0.1056    0.4574
    0.6110    0.8754
    0.7788    0.5181
    0.4235    0.9436
    0.0908    0.6377
    0.2665    0.9577
    0.1537    0.2407

help .
  Operators and special characters.
 
  Arithmetic operators.
    <a href="matlab:help plus">plus</a>       - Plus                               +    
    <a href="matlab:help uplus">uplus</a>      - Unary plus                         +    
    <a href="matlab:help minus">minus</a>      - Minus                              -    
    <a href="matlab:help uminus">uminus</a>     - Unary minus                        -    
    <a href="matlab:help mtimes">mtimes</a>     - Matrix multiply                    *    
    <a href="matlab:help times">times</a>      - Array multiply                    .*    
    <a href="matlab:help mpower">mpower</a>     - Matrix power                       ^    
    <a href="matlab:help power">power</a>      - Array power                       .^    
    <a href="matlab:help mldivide">mldivide</a>   - Backslash or left matrix divide    \    
    <a href="matlab:help mrdivide">mrdivide</a>   - Slash or right matrix divide       /    
    <a href="matlab:help ldivide">ldivide</a>    - Left array divide                 .\    
    <a href="matlab:help rdivide">rdivide</a>    - Right array divide                ./    
    <a href="matlab:help idivide">idivide</a>    - Integer division with rounding option.
    <a href="matlab:help kron">kron</a>       - Kronecker tensor product   
 
  Relational operators.
    <a href="matlab:help eq">eq</a>         - Equal                             ==     
    <a href="matlab:help ne">ne</a>         - Not equal                         ~=     
    <a href="matlab:help lt">lt</a>         - Less than                          <      
    <a href="matlab:help gt">gt</a>         - Greater than                       >      
    <a href="matlab:help le">le</a>         - Less than or equal                <=     
    <a href="matlab:help ge">ge</a>         - Greater than or equal             >=     
 
  Logical operators.
    <a href="matlab:help relop">relop</a>      - Short-circuit logical AND         &&     
    <a href="matlab:help relop">relop</a>      - Short-circuit logical OR          ||     
    <a href="matlab:help and">and</a>        - Element-wise logical AND           &      
    <a href="matlab:help or">or</a>         - Element-wise logical OR            |      
    <a href="matlab:help not">not</a>        - Logical NOT                        ~      
    <a href="matlab:help punct">punct</a>      - Ignore function argument or output ~
    <a href="matlab:help xor">xor</a>        - Logical EXCLUSIVE OR
    <a href="matlab:help any">any</a>        - True if any element of vector is nonzero
    <a href="matlab:help all">all</a>        - True if all elements of vector are nonzero
 
  Special characters. 
    <a href="matlab:help colon">colon</a>      - Colon                              : 
    <a href="matlab:help paren">paren</a>      - Parentheses and subscripting      ( )              
    <a href="matlab:help paren">paren</a>      - Brackets                          [ ]     
    <a href="matlab:help paren">paren</a>      - Braces and subscripting           { }          
    <a href="matlab:help punct">punct</a>      - Function handle creation           @
    <a href="matlab:help punct">punct</a>      - Decimal point                      .      
    <a href="matlab:help punct">punct</a>      - Structure field access             .      
    <a href="matlab:help punct">punct</a>      - Parent directory                   ..     
    <a href="matlab:help punct">punct</a>      - Continuation                       ...    
    <a href="matlab:help punct">punct</a>      - Separator                          ,      
    <a href="matlab:help punct">punct</a>      - Semicolon                          ;      
    <a href="matlab:help punct">punct</a>      - Comment                            %      
    <a href="matlab:help punct">punct</a>      - Invoke operating system command    !            
    <a href="matlab:help punct">punct</a>      - Assignment                         =
    <a href="matlab:help punct">punct</a>      - Quote                              '      
    <a href="matlab:help transpose">transpose</a>  - Transpose                         .'
    <a href="matlab:help ctranspose">ctranspose</a> - Complex conjugate transpose        ' 
    <a href="matlab:help horzcat">horzcat</a>    - Horizontal concatenation          [,]     
    <a href="matlab:help vertcat">vertcat</a>    - Vertical concatenation            [;]     
    <a href="matlab:help subsasgn">subsasgn</a>   - Subscripted assignment          ( ),{ },.   
    <a href="matlab:help subsref">subsref</a>    - Subscripted reference           ( ),{ },.   
    <a href="matlab:help subsindex">subsindex</a>  - Subscript index
    <a href="matlab:help metaclass">metaclass</a>  - Metaclass for MATLAB class         ?
 
  Bitwise operators.
    <a href="matlab:help bitand">bitand</a>     - Bit-wise AND.
    <a href="matlab:help bitcmp">bitcmp</a>     - Complement bits.
    <a href="matlab:help bitor">bitor</a>      - Bit-wise OR.
    <a href="matlab:help bitmax">bitmax</a>     - Maximum floating point integer.
    <a href="matlab:help bitxor">bitxor</a>     - Bit-wise XOR.
    <a href="matlab:help bitset">bitset</a>     - Set bit.
    <a href="matlab:help bitget">bitget</a>     - Get bit.
    <a href="matlab:help bitshift">bitshift</a>   - Bit-wise shift.
 
  Set operators.
    <a href="matlab:help union">union</a>      - Set union.
    <a href="matlab:help unique">unique</a>     - Set unique.
    <a href="matlab:help intersect">intersect</a>  - Set intersection.
    <a href="matlab:help setdiff">setdiff</a>    - Set difference.
    <a href="matlab:help setxor">setxor</a>     - Set exclusive-or.
    <a href="matlab:help ismember">ismember</a>   - True for set member.
 
  See also <a href="matlab:help arith">arith</a>, <a href="matlab:help relop">relop</a>, <a href="matlab:help slash">slash</a>, <a href="matlab:help function_handle">function_handle</a>.

C, d

C =

  Columns 1 through 8

    0.1062    0.4228    0.6665    0.3689    0.1206    0.9827    0.0225    0.6999
    0.3724    0.5479    0.1781    0.4607    0.5895    0.7302    0.4253    0.6385
    0.1981    0.9427    0.1280    0.9816    0.2262    0.3439    0.3127    0.0336
    0.4897    0.4177    0.9991    0.1564    0.3846    0.5841    0.1615    0.0688
    0.3395    0.9831    0.1711    0.8555    0.5830    0.1078    0.1788    0.3196
    0.9516    0.3015    0.0326    0.6448    0.2518    0.9063    0.4229    0.5309
    0.9203    0.7011    0.5612    0.3763    0.2904    0.8797    0.0942    0.6544
    0.0527    0.6663    0.8819    0.1909    0.6171    0.8178    0.5985    0.4076
    0.7379    0.5391    0.6692    0.4283    0.2653    0.2607    0.4709    0.8200
    0.2691    0.6981    0.1904    0.4820    0.8244    0.5944    0.6959    0.7184

  Columns 9 through 10

    0.9686    0.2810
    0.5313    0.4401
    0.3251    0.5271
    0.1056    0.4574
    0.6110    0.8754
    0.7788    0.5181
    0.4235    0.9436
    0.0908    0.6377
    0.2665    0.9577
    0.1537    0.2407


d =

    0.3993
    0.5269
    0.4168
    0.6569
    0.6280
    0.2920
    0.4317
    0.0155
    0.9841
    0.1672

x=C/d
{??? Error using ==> mrdivide
Matrix dimensions must agree.
} 
x=C\d

x =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

x=inv(C)*d

x =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

help \
  Operators and special characters.
 
  Arithmetic operators.
    <a href="matlab:help plus">plus</a>       - Plus                               +    
    <a href="matlab:help uplus">uplus</a>      - Unary plus                         +    
    <a href="matlab:help minus">minus</a>      - Minus                              -    
    <a href="matlab:help uminus">uminus</a>     - Unary minus                        -    
    <a href="matlab:help mtimes">mtimes</a>     - Matrix multiply                    *    
    <a href="matlab:help times">times</a>      - Array multiply                    .*    
    <a href="matlab:help mpower">mpower</a>     - Matrix power                       ^    
    <a href="matlab:help power">power</a>      - Array power                       .^    
    <a href="matlab:help mldivide">mldivide</a>   - Backslash or left matrix divide    \    
    <a href="matlab:help mrdivide">mrdivide</a>   - Slash or right matrix divide       /    
    <a href="matlab:help ldivide">ldivide</a>    - Left array divide                 .\    
    <a href="matlab:help rdivide">rdivide</a>    - Right array divide                ./    
    <a href="matlab:help idivide">idivide</a>    - Integer division with rounding option.
    <a href="matlab:help kron">kron</a>       - Kronecker tensor product   
 
  Relational operators.
    <a href="matlab:help eq">eq</a>         - Equal                             ==     
    <a href="matlab:help ne">ne</a>         - Not equal                         ~=     
    <a href="matlab:help lt">lt</a>         - Less than                          <      
    <a href="matlab:help gt">gt</a>         - Greater than                       >      
    <a href="matlab:help le">le</a>         - Less than or equal                <=     
    <a href="matlab:help ge">ge</a>         - Greater than or equal             >=     
 
  Logical operators.
    <a href="matlab:help relop">relop</a>      - Short-circuit logical AND         &&     
    <a href="matlab:help relop">relop</a>      - Short-circuit logical OR          ||     
    <a href="matlab:help and">and</a>        - Element-wise logical AND           &      
    <a href="matlab:help or">or</a>         - Element-wise logical OR            |      
    <a href="matlab:help not">not</a>        - Logical NOT                        ~      
    <a href="matlab:help punct">punct</a>      - Ignore function argument or output ~
    <a href="matlab:help xor">xor</a>        - Logical EXCLUSIVE OR
    <a href="matlab:help any">any</a>        - True if any element of vector is nonzero
    <a href="matlab:help all">all</a>        - True if all elements of vector are nonzero
 
  Special characters. 
    <a href="matlab:help colon">colon</a>      - Colon                              : 
    <a href="matlab:help paren">paren</a>      - Parentheses and subscripting      ( )              
    <a href="matlab:help paren">paren</a>      - Brackets                          [ ]     
    <a href="matlab:help paren">paren</a>      - Braces and subscripting           { }          
    <a href="matlab:help punct">punct</a>      - Function handle creation           @
    <a href="matlab:help punct">punct</a>      - Decimal point                      .      
    <a href="matlab:help punct">punct</a>      - Structure field access             .      
    <a href="matlab:help punct">punct</a>      - Parent directory                   ..     
    <a href="matlab:help punct">punct</a>      - Continuation                       ...    
    <a href="matlab:help punct">punct</a>      - Separator                          ,      
    <a href="matlab:help punct">punct</a>      - Semicolon                          ;      
    <a href="matlab:help punct">punct</a>      - Comment                            %      
    <a href="matlab:help punct">punct</a>      - Invoke operating system command    !            
    <a href="matlab:help punct">punct</a>      - Assignment                         =
    <a href="matlab:help punct">punct</a>      - Quote                              '      
    <a href="matlab:help transpose">transpose</a>  - Transpose                         .'
    <a href="matlab:help ctranspose">ctranspose</a> - Complex conjugate transpose        ' 
    <a href="matlab:help horzcat">horzcat</a>    - Horizontal concatenation          [,]     
    <a href="matlab:help vertcat">vertcat</a>    - Vertical concatenation            [;]     
    <a href="matlab:help subsasgn">subsasgn</a>   - Subscripted assignment          ( ),{ },.   
    <a href="matlab:help subsref">subsref</a>    - Subscripted reference           ( ),{ },.   
    <a href="matlab:help subsindex">subsindex</a>  - Subscript index
    <a href="matlab:help metaclass">metaclass</a>  - Metaclass for MATLAB class         ?
 
  Bitwise operators.
    <a href="matlab:help bitand">bitand</a>     - Bit-wise AND.
    <a href="matlab:help bitcmp">bitcmp</a>     - Complement bits.
    <a href="matlab:help bitor">bitor</a>      - Bit-wise OR.
    <a href="matlab:help bitmax">bitmax</a>     - Maximum floating point integer.
    <a href="matlab:help bitxor">bitxor</a>     - Bit-wise XOR.
    <a href="matlab:help bitset">bitset</a>     - Set bit.
    <a href="matlab:help bitget">bitget</a>     - Get bit.
    <a href="matlab:help bitshift">bitshift</a>   - Bit-wise shift.
 
  Set operators.
    <a href="matlab:help union">union</a>      - Set union.
    <a href="matlab:help unique">unique</a>     - Set unique.
    <a href="matlab:help intersect">intersect</a>  - Set intersection.
    <a href="matlab:help setdiff">setdiff</a>    - Set difference.
    <a href="matlab:help setxor">setxor</a>     - Set exclusive-or.
    <a href="matlab:help ismember">ismember</a>   - True for set member.
 
  See also <a href="matlab:help arith">arith</a>, <a href="matlab:help relop">relop</a>, <a href="matlab:help slash">slash</a>, <a href="matlab:help function_handle">function_handle</a>.

y=C\d

y =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

x==y

ans =

     0
     1
     0
     1
     0
     0
     0
     1
     0
     0

x=inv(C)*d

x =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

x, y

x =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387


y =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

x==y

ans =

     0
     1
     0
     1
     0
     0
     0
     1
     0
     0

y==x

ans =

     0
     1
     0
     1
     0
     0
     0
     1
     0
     0

x-y

ans =

  1.0e-014 *

    0.1776
         0
    0.0444
         0
    0.1776
   -0.1332
   -0.7105
         0
   -0.1776
    0.0888

x

x =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

y

y =

   -5.1444
  -16.3445
    2.0385
   17.1204
    7.1471
    3.8991
  -10.4249
    4.8078
   -9.5539
    5.7387

x<0

ans =

     1
     1
     0
     0
     0
     0
     1
     0
     1
     0

x>0

ans =

     0
     0
     1
     1
     1
     1
     0
     1
     0
     1

z=x(logical([0 0 1 1 1 1 0 1 0 1]), 1)

z =

    2.0385
   17.1204
    7.1471
    3.8991
    4.8078
    5.7387

z=x(logical([0 0 1 1 1 1 0 1 0 1]))

z =

    2.0385
   17.1204
    7.1471
    3.8991
    4.8078
    5.7387

z=x(logical(x>0))

z =

    2.0385
   17.1204
    7.1471
    3.8991
    4.8078
    5.7387

z=x(x>0)

z =

    2.0385
   17.1204
    7.1471
    3.8991
    4.8078
    5.7387

quit
